import mongoose from "mongoose";
import Drone from "./models/drone.model.js";
import dotenv from "dotenv";

dotenv.config();

const deleteDronesBySerialNumber = async () => {
  try {
    // K·∫øt n·ªëi MongoDB
    await mongoose.connect(process.env.MONGODB_URL);
    console.log("‚úÖ Connected to MongoDB");

    // Hi·ªÉn th·ªã drone tr∆∞·ªõc khi x√≥a
    const dronesToDelete = await Drone.find({
      serialNumber: { $in: ["2", "001"] }
    });
    
    console.log("\nüìã Drone s·∫Ω b·ªã x√≥a:");
    dronesToDelete.forEach(drone => {
      console.log(`  - ${drone.model} (SN: ${drone.serialNumber}) - Status: ${drone.status}`);
    });

    // X√≥a drone c√≥ serialNumber l√† "2" v√† "001" (hard delete, b·ªè qua status)
    const result = await Drone.deleteMany({
      serialNumber: { $in: ["2", "001"] }
    });

    console.log(`\n‚úÖ ƒê√£ x√≥a ${result.deletedCount} drone(s)`);

    // Hi·ªÉn th·ªã danh s√°ch drone c√≤n l·∫°i
    const remainingDrones = await Drone.find({});
    console.log("\nüìã Danh s√°ch drone c√≤n l·∫°i:");
    if (remainingDrones.length === 0) {
      console.log("  (Kh√¥ng c√≤n drone n√†o)");
    } else {
      remainingDrones.forEach(drone => {
        console.log(`  - ${drone.model} (SN: ${drone.serialNumber}) - Status: ${drone.status}`);
      });
    }

    await mongoose.disconnect();
    console.log("\n‚úÖ ƒê√£ ng·∫Øt k·∫øt n·ªëi MongoDB");
    process.exit(0);
  } catch (error) {
    console.error("‚ùå Error:", error.message);
    process.exit(1);
  }
};

deleteDronesBySerialNumber();
